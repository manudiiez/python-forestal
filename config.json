{
  "evaluacion": {
    "version": "1.0.0",
    "puntaje_maximo": 260,
    "umbral_aprobacion": 182,
    "criterios": [
      {
        "id": "SING-001",
        "categoria": "Singleton",
        "tipo": "estatica",
        "comando": "grep -rn '_instance = None' --include='*.py' .",
        "puntaje": 2,
        "threshold": 1,
        "peso": "alto"
      },
      {
        "id": "SING-002",
        "categoria": "Singleton",
        "tipo": "estatica",
        "comando": "grep -rn 'def __new__' --include='*.py' .",
        "puntaje": 3,
        "threshold": 1,
        "peso": "critico"
      },
      {
        "id": "SING-003",
        "categoria": "Singleton",
        "descripcion": "Verificar uso de threading.Lock",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'threading.Lock\\|from threading import Lock' --include='*.py' .",
        "puntaje": 3,
        "threshold": 1,
        "peso": "alto"
      },
      {
        "id": "SING-004",
        "categoria": "Singleton",
        "descripcion": "Verificar metodo get_instance()",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'def get_instance' --include='*.py' .",
        "puntaje": 2,
        "threshold": 1,
        "peso": "medio"
      },
      {
        "id": "FACT-001",
        "categoria": "Factory",
        "tipo": "estatica",
        "comando": "grep -rn '@staticmethod' --include='*factory*.py' .",
        "puntaje": 3,
        "threshold": 2,
        "peso": "critico"
      },
      {
        "id": "FACT-002",
        "categoria": "Factory",
        "descripcion": "Verificar existencia de clase Factory",
        "tipo": "estatica",
        "metodo": "glob",
        "comando": "find . -name '*factory*.py' -type f",
        "puntaje": 2,
        "threshold": 1,
        "peso": "critico"
      },
      {
        "id": "FACT-003",
        "categoria": "Factory",
        "descripcion": "Verificar metodos de creacion",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'def crear_\\|def _crear_' --include='*factory*.py' .",
        "puntaje": 3,
        "threshold": 4,
        "peso": "alto"
      },
      {
        "id": "FACT-004",
        "categoria": "Factory",
        "descripcion": "Verificar uso de diccionario para dispatch",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'factories = {' --include='*factory*.py' .",
        "puntaje": 2,
        "threshold": 1,
        "peso": "medio"
      },
      {
        "id": "OBSR-001",
        "categoria": "Observer",
        "tipo": "estatica",
        "comando": "grep -rn 'class Observable' --include='*.py' .",
        "puntaje": 3,
        "threshold": 1,
        "peso": "critico"
      },
      {
        "id": "OBSR-002",
        "categoria": "Observer",
        "descripcion": "Verificar interfaz Observer",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'class Observer' --include='*.py' .",
        "puntaje": 3,
        "threshold": 1,
        "peso": "critico"
      },
      {
        "id": "OBSR-003",
        "categoria": "Observer",
        "descripcion": "Verificar uso de Generic[T]",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'Generic\\[T\\]\\|Observable\\[' --include='*.py' .",
        "puntaje": 4,
        "threshold": 2,
        "peso": "alto"
      },
      {
        "id": "OBSR-004",
        "categoria": "Observer",
        "descripcion": "Verificar metodo de notificacion",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'def notificar_observadores' --include='*.py' .",
        "puntaje": 3,
        "threshold": 1,
        "peso": "alto"
      },
      {
        "id": "STRT-001",
        "categoria": "Strategy",
        "tipo": "estatica",
        "comando": "grep -rn 'class.*Strategy.*ABC' --include='*.py' .",
        "puntaje": 3,
        "threshold": 1,
        "peso": "critico"
      },
      {
        "id": "STRT-002",
        "categoria": "Strategy",
        "descripcion": "Verificar al menos 2 implementaciones",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'Strategy):' --include='*.py' .",
        "puntaje": 4,
        "threshold": 2,
        "peso": "critico"
      },
      {
        "id": "STRT-003",
        "categoria": "Strategy",
        "descripcion": "Verificar inyeccion via constructor",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'self._estrategia\\|estrategia:' --include='*service*.py' .",
        "puntaje": 3,
        "threshold": 2,
        "peso": "alto"
      },
      {
        "id": "EXEC-001",
        "categoria": "Ejecucion",
        "descripcion": "Verificar que main.py ejecuta sin errores",
        "tipo": "dinamica",
        "metodo": "python",
        "comando": "timeout 30 python main.py",
        "puntaje": 10,
        "threshold": 0,
        "peso": "critico",
        "validacion": "return_code == 0"
      },
      {
        "id": "EXEC-002",
        "categoria": "Ejecucion",
        "descripcion": "Verificar mensaje EJEMPLO COMPLETADO EXITOSAMENTE",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "python -u main.py 2>&1 | grep -q 'EJEMPLO COMPLETADO EXITOSAMENTE'",
        "puntaje": 5,
        "threshold": 1,
        "peso": "critico"
      },
      {
        "id": "EXEC-003",
        "categoria": "Ejecucion",
        "descripcion": "Verificar ausencia de tracebacks",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "timeout 30 python main.py 2>&1 | grep -i 'traceback\\|error:' | wc -l",
        "puntaje": 5,
        "threshold": 0,
        "peso": "alto",
        "inverted": true
      },
      {
        "id": "EXEC-004",
        "categoria": "Ejecucion",
        "descripcion": "Verificar mensaje de Singleton en output",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "timeout 30 python main.py 2>&1 | grep -i 'singleton'",
        "puntaje": 3,
        "threshold": 1,
        "peso": "medio"
      },
      {
        "id": "EXEC-005",
        "categoria": "Ejecucion",
        "descripcion": "Verificar mensaje de Factory en output",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "timeout 30 python main.py 2>&1 | grep -i 'factory'",
        "puntaje": 3,
        "threshold": 1,
        "peso": "medio"
      },
      {
        "id": "EXEC-006",
        "categoria": "Ejecucion",
        "descripcion": "Verificar mensaje de Observer en output",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "timeout 30 python main.py 2>&1 | grep -i 'observer'",
        "puntaje": 3,
        "threshold": 1,
        "peso": "medio"
      },
      {
        "id": "EXEC-007",
        "categoria": "Ejecucion",
        "descripcion": "Verificar mensaje de Strategy en output",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "timeout 30 python main.py 2>&1 | grep -i 'strategy'",
        "puntaje": 3,
        "threshold": 1,
        "peso": "medio"
      },
      {
        "id": "EXEC-008",
        "categoria": "Funcionalidad",
        "descripcion": "Verificar mensaje de plantacion",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "timeout 30 python main.py 2>&1 | grep -i 'plantar\\|cultivo'",
        "puntaje": 3,
        "threshold": 4,
        "peso": "alto"
      },
      {
        "id": "EXEC-009",
        "categoria": "Funcionalidad",
        "descripcion": "Verificar mensaje de riego",
        "tipo": "dinamica",
        "metodo": "python_output",
        "comando": "timeout 30 python main.py 2>&1 | grep -i 'riego\\|agua'",
        "puntaje": 3,
        "threshold": 2,
        "peso": "alto"
      },
      {
        "id": "EXEC-010",
        "categoria": "Funcionalidad",
        "descripcion": "Verificar archivo persistido existe",
        "tipo": "dinamica",
        "metodo": "filesystem",
        "comando": "timeout 30 python main.py && find ./data -name '*.dat' -type f",
        "puntaje": 3,
        "threshold": 1,
        "peso": "alto"
      },
      {
        "id": "QUAL-001",
        "categoria": "Calidad",
        "tipo": "estatica",
        "comando": "find . -name 'constantes.py' -type f",
        "puntaje": 3,
        "threshold": 1,
        "peso": "alto"
      },
      {
        "id": "QUAL-002",
        "categoria": "Calidad",
        "descripcion": "Verificar ausencia de lambdas",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'lambda ' --include='*.py' . | wc -l",
        "puntaje": 2,
        "threshold": 0,
        "peso": "medio",
        "inverted": true
      },
      {
        "id": "QUAL-003",
        "categoria": "Calidad",
        "descripcion": "Verificar uso de type hints",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'def.*->\\|: str\\|: int\\|: float' --include='*.py' . | wc -l",
        "puntaje": 3,
        "threshold": 50,
        "peso": "medio"
      },
      {
        "id": "QUAL-004",
        "categoria": "Calidad",
        "descripcion": "Verificar docstrings Google Style (Args:)",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn 'Args:' --include='*.py' . | wc -l",
        "puntaje": 2,
        "threshold": 20,
        "peso": "bajo"
      },
      {
        "id": "QUAL-005",
        "categoria": "Calidad",
        "descripcion": "Verificar comentarios de seccion en imports",
        "tipo": "estatica",
        "metodo": "grep",
        "comando": "grep -rn '# Standard library\\|# Local application' --include='*.py' . | wc -l",
        "puntaje": 2,
        "threshold": 10,
        "peso": "bajo"
      },
      {
        "id": "STRC-001",
        "categoria": "Estructura",
        "descripcion": "Verificar paquete entidades existe",
        "tipo": "estatica",
        "metodo": "glob",
        "comando": "find . -type d -name 'entidades'",
        "puntaje": 2,
        "threshold": 1,
        "peso": "alto"
      },
      {
        "id": "STRC-002",
        "categoria": "Estructura",
        "descripcion": "Verificar paquete servicios existe",
        "tipo": "estatica",
        "metodo": "glob",
        "comando": "find . -type d -name 'servicios'",
        "puntaje": 2,
        "threshold": 1,
        "peso": "alto"
      },
      {
        "id": "STRC-003",
        "categoria": "Estructura",
        "descripcion": "Verificar paquete patrones existe",
        "tipo": "estatica",
        "metodo": "glob",
        "comando": "find . -type d -name 'patrones'",
        "puntaje": 2,
        "threshold": 1,
        "peso": "critico"
      },
      {
        "id": "STRC-004",
        "categoria": "Estructura",
        "descripcion": "Verificar archivos __init__.py en paquetes",
        "tipo": "estatica",
        "metodo": "glob",
        "comando": "find . -name '__init__.py' -type f | wc -l",
        "puntaje": 2,
        "threshold": 10,
        "peso": "medio"
      },
      {
        "id": "METR-001",
        "categoria": "Metricas",
        "descripcion": "Verificar complejidad ciclomatica promedio < 10",
        "tipo": "estatica",
        "metodo": "radon",
        "comando": "radon cc . -a -s",
        "puntaje": 3,
        "threshold": 10,
        "peso": "bajo",
        "requires_tool": "radon"
      },
      {
        "id": "METR-002",
        "categoria": "Metricas",
        "descripcion": "Contar lineas de codigo Python",
        "tipo": "estatica",
        "metodo": "cloc",
        "comando": "find . -name '*.py' -not -path './.venv/*' -exec wc -l {} + | tail -1",
        "puntaje": 0,
        "threshold": 500,
        "peso": "informativo"
      },
      {
        "id": "METR-003",
        "categoria": "Metricas",
        "descripcion": "Detectar codigo duplicado con PMD CPD",
        "tipo": "estatica",
        "metodo": "cpd",
        "comando": "pmd cpd --minimum-tokens 50 --language python --files .",
        "puntaje": 3,
        "threshold": 5,
        "peso": "bajo",
        "requires_tool": "pmd",
        "inverted": true
      }
    ]
  }
}